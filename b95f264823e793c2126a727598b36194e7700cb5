{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0945a8fd_2de78789",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2024-10-09T20:11:11Z",
      "side": 1,
      "message": "This will require rolling out new bot version before it becomes available in bot_config.py. I can do that once it lands.",
      "revId": "b95f264823e793c2126a727598b36194e7700cb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b2ad7f8_0d9101d9",
        "filename": "appengine/swarming/swarming_bot/api/platforms/osx.py",
        "patchSetId": 2
      },
      "lineNbr": 832,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2024-10-09T20:11:11Z",
      "side": 1,
      "message": "Does it need a manual drop to avoid leaks? Or it is dropped when the python object is GCed?",
      "range": {
        "startLine": 832,
        "startChar": 43,
        "endLine": 832,
        "endChar": 57
      },
      "revId": "b95f264823e793c2126a727598b36194e7700cb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "427838ee_af0be09e",
        "filename": "appengine/swarming/swarming_bot/api/platforms/osx.py",
        "patchSetId": 2
      },
      "lineNbr": 832,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2024-10-09T20:11:11Z",
      "side": 1,
      "message": "Is this Swarming bot process itself? Is thermal state shared across all processes? Weird api...",
      "range": {
        "startLine": 832,
        "startChar": 29,
        "endLine": 832,
        "endChar": 42
      },
      "revId": "b95f264823e793c2126a727598b36194e7700cb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5de05dc9_549d6ff3",
        "filename": "appengine/swarming/swarming_bot/api/platforms/osx.py",
        "patchSetId": 2
      },
      "lineNbr": 832,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2024-10-09T20:13:48Z",
      "side": 1,
      "message": "Actually, is this really correct? The corresponding Objective-C code is `[[NSProcessInfo processInfo] thermalState]` which I believe does something else (calls `processInfo` class method, not `alloc`).",
      "parentUuid": "0b2ad7f8_0d9101d9",
      "range": {
        "startLine": 832,
        "startChar": 43,
        "endLine": 832,
        "endChar": 57
      },
      "revId": "b95f264823e793c2126a727598b36194e7700cb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8006815c_063bf48b",
        "filename": "appengine/swarming/swarming_bot/api/platforms/osx.py",
        "patchSetId": 2
      },
      "lineNbr": 832,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-10-09T20:22:47Z",
      "side": 1,
      "message": "I initially had `NSProcessInfo().thermalState()`, which appeared to work on my local M3 Macbook Pro. However, I was using a newer version of `pyobjc` which allows that - the version available for swarming seems to require `.alloc().init()` instead of directly creating `NSProcessInfo` via its constructor.\n\nI got `alloc().init()` from [here](https://pyobjc.readthedocs.io/en/latest/core/intro.html#two-phase-instantiation). I\u0027m not seeing anything that implies that it will need to be manually freed afterwards. [This section](https://pyobjc.readthedocs.io/en/latest/core/intro.html#finalizers) implies to me that the ready-made wrappers have `dealloc`/`__del__` already implemented.\n\nWhen I was testing this, I just checked to make sure there were no errors and that an int was returned. I\u0027m trying to load my Macbook right now to confirm that this does actually get the thermal state instead of always returning 0.",
      "parentUuid": "5de05dc9_549d6ff3",
      "range": {
        "startLine": 832,
        "startChar": 43,
        "endLine": 832,
        "endChar": 57
      },
      "revId": "b95f264823e793c2126a727598b36194e7700cb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff3c719c_2762d9de",
        "filename": "appengine/swarming/swarming_bot/api/platforms/osx.py",
        "patchSetId": 2
      },
      "lineNbr": 832,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-10-09T20:22:47Z",
      "side": 1,
      "message": "My understanding was that thermal state is shared across all processes, but I\u0027m very unfamiliar with Apple\u0027s APIs. `NSProcessInfo` contains other process-specific stuff, but per-process thermal state doesn\u0027t make sense, so I\u0027m guessing it\u0027s shared.",
      "parentUuid": "427838ee_af0be09e",
      "range": {
        "startLine": 832,
        "startChar": 29,
        "endLine": 832,
        "endChar": 42
      },
      "revId": "b95f264823e793c2126a727598b36194e7700cb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37b0803d_28f0f0f2",
        "filename": "appengine/swarming/swarming_bot/api/platforms/osx.py",
        "patchSetId": 2
      },
      "lineNbr": 832,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2024-10-09T20:41:52Z",
      "side": 1,
      "message": "I\u0027m pretty sure this should be `Foundation.NSProcessInfo.processInfo().thermalState()` to match Objective-C examples of how to get thermalState: https://developer.apple.com/library/archive/documentation/Performance/Conceptual/power_efficiency_guidelines_osx/RespondToThermalStateChanges.html\n\nAs written, this does `[[NSProcessInfo alloc] init]` which instantiates a new (presumably) empty NSProcessInfo object.\n\nThough it seems to work too. But `Foundation.NSProcessInfo.processInfo().thermalState()` is more correct.",
      "parentUuid": "8006815c_063bf48b",
      "range": {
        "startLine": 832,
        "startChar": 43,
        "endLine": 832,
        "endChar": 57
      },
      "revId": "b95f264823e793c2126a727598b36194e7700cb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbfb851c_8a8c5aa5",
        "filename": "appengine/swarming/swarming_bot/api/platforms/osx.py",
        "patchSetId": 2
      },
      "lineNbr": 832,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-10-09T20:49:16Z",
      "side": 1,
      "message": "Done. I\u0027m having trouble verifying that this does actually give us the expected information instead of always returning 0, though. I\u0027ve been running `sudo thermal watch` to get thermal state from an OS-provided utility while hitting both the CPU and GPU fully with all of the intake vents blocked off and it\u0027s not reporting anything above \"nominal\".",
      "parentUuid": "37b0803d_28f0f0f2",
      "range": {
        "startLine": 832,
        "startChar": 43,
        "endLine": 832,
        "endChar": 57
      },
      "revId": "b95f264823e793c2126a727598b36194e7700cb5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}