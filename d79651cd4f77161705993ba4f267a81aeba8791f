{
  "comments": [
    {
      "key": {
        "uuid": "6c67428f_70a6ac4b",
        "filename": "appengine/components/components/protoutil/field_masks.py",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2018-05-21T18:31:42Z",
      "side": 1,
      "message": "consider treating EOF as a special token, maybe it will simplify some code (read_path will be few lines shorter at least..)",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 90,
        "endChar": 40
      },
      "revId": "d79651cd4f77161705993ba4f267a81aeba8791f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54d27887_caebaed0",
        "filename": "appengine/components/components/protoutil/field_masks.py",
        "patchSetId": 3
      },
      "lineNbr": 197,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2018-05-21T18:31:42Z",
      "side": 1,
      "message": "strictly speaking this should be a part of the tokenizer",
      "range": {
        "startLine": 194,
        "startChar": 4,
        "endLine": 197,
        "endChar": 18
      },
      "revId": "d79651cd4f77161705993ba4f267a81aeba8791f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "462fe5c7_addefc60",
        "filename": "appengine/components/components/protoutil/field_masks.py",
        "patchSetId": 3
      },
      "lineNbr": 197,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2018-05-21T21:33:05Z",
      "side": 1,
      "message": "the whole point of tokenizer is to extract logic that doesn\u0027t require the descriptor in context. Perhaps tokenizer is a bad word? Do you have a better suggestion?\n\nwithout description in context, tokenizer wouldn\u0027t know whether \"true\" is a boolean map key or a field name.",
      "parentUuid": "54d27887_caebaed0",
      "range": {
        "startLine": 194,
        "startChar": 4,
        "endLine": 197,
        "endChar": 18
      },
      "revId": "d79651cd4f77161705993ba4f267a81aeba8791f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17d36e1d_f0fd097c",
        "filename": "appengine/components/components/protoutil/field_masks.py",
        "patchSetId": 3
      },
      "lineNbr": 197,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2018-05-21T22:26:01Z",
      "side": 1,
      "message": "All I\u0027m saying is that checking that _LITERAL is [_a-zA-Z][_a-zA-Z]* should be part of the tokenizer, this this is what _LITERAL means: it\u0027s an identifier with the specific structure. Why does it need a context to check that?",
      "parentUuid": "462fe5c7_addefc60",
      "range": {
        "startLine": 194,
        "startChar": 4,
        "endLine": 197,
        "endChar": 18
      },
      "revId": "d79651cd4f77161705993ba4f267a81aeba8791f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d182aee0_0d471983",
        "filename": "appengine/components/components/protoutil/field_masks.py",
        "patchSetId": 3
      },
      "lineNbr": 197,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2018-05-21T23:31:09Z",
      "side": 1,
      "message": "the check we do here is different from what we would do in tokenizer. The tokenizer would check that a literal matches any of possible literal types, that is ([a-zA-Z_][a-zA-Z_0-9]*|-?\\d+|true|false). This checks against specifically [a-zA-Z_][a-zA-Z_0-9]*, so even if we do a check in tokenizer, we\u0027d still have to have a check here. At this point, it is better to have one check, here. Note that read_bool and read_integer make their respective checks too",
      "parentUuid": "17d36e1d_f0fd097c",
      "range": {
        "startLine": 194,
        "startChar": 4,
        "endLine": 197,
        "endChar": 18
      },
      "revId": "d79651cd4f77161705993ba4f267a81aeba8791f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3172e8c3_756825e8",
        "filename": "appengine/components/components/protoutil/field_masks.py",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2018-05-21T18:31:42Z",
      "side": 1,
      "message": "I think it would be a bit safer to have a whitelist here instead:\n\nelif path[i] in _LITERAL_CHARS:\n  ...\n  while i \u003c len(path) and path[i] in _LITERAL_CHARS:\n    ...\nelse:\n  raise ValueError(\u0027unexpected symbol %q in path string\u0027 % path[i])\n\nThat way is people pass e.g. \"a.b.c d.e.f\" as a field path, they\u0027ll get somewhat clearer error message.",
      "range": {
        "startLine": 269,
        "startChar": 26,
        "endLine": 269,
        "endChar": 60
      },
      "revId": "d79651cd4f77161705993ba4f267a81aeba8791f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}