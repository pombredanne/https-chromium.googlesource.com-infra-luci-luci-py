{
  "comments": [
    {
      "key": {
        "uuid": "c54d2845_89bffff0",
        "filename": "appengine/swarming/server/task_queues.py",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2017-11-15T21:12:09Z",
      "side": 1,
      "message": "but this is not async....\n\nif should be\n\nobj \u003d yield key.get_async()\n...\n  yield key.delete_async()\n\n(tx itself should also be decoraded with @ndb.tasklet, though I\u0027m not sure how it mixes with datastore_utils.transaction_async. With vanilla ndb we should be just using @ndb.transactional_tasklet, there\u0027s probably some alternative for this in datastore_utils).\n\nI have a suspicion this is what\u0027s causing recursion errors. We are mixing async and non-async code. It has weird consequences.",
      "range": {
        "startLine": 437,
        "startChar": 2,
        "endLine": 441,
        "endChar": 16
      },
      "revId": "6ae0db74ff7cfd0c207e8d91ef8304f67b0a1702",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b812fd58_68cd7fa6",
        "filename": "appengine/swarming/server/task_queues.py",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1000487
      },
      "writtenOn": "2017-11-16T01:54:49Z",
      "side": 1,
      "message": "There\u0027s no relation with transaction_async() and transaction() and the callback synchronicity. The sync version always call the async version;\n\nhttps://cs.chromium.org/chromium/infra/luci/appengine/components/components/datastore_utils/txn.py?l\u003d64\n\nand\n\nhttps://cloud.google.com/appengine/docs/standard/python/refdocs/modules/google/appengine/ext/ndb/model#transaction",
      "parentUuid": "c54d2845_89bffff0",
      "range": {
        "startLine": 437,
        "startChar": 2,
        "endLine": 441,
        "endChar": 16
      },
      "revId": "6ae0db74ff7cfd0c207e8d91ef8304f67b0a1702",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6388c31_e6807909",
        "filename": "appengine/swarming/server/task_queues.py",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2017-11-16T03:25:40Z",
      "side": 1,
      "message": ":-/\n\nI don\u0027t understand how ndb works then.\n\nDo you mind making it async just to see how it affects \u0027infinite recursion\u0027 problem?\n\nIt still feels wrong to me. Forgetting about \u0027transaction_async\u0027, we essentially call a bunch of blocking functions from inside @ndb.tasklet. With \u0027transaction_async\u0027 I think we make blocking calls, and then make the actual Commit() RPC asynchronously. In either case it is mixing of async and non-async code.",
      "parentUuid": "b812fd58_68cd7fa6",
      "range": {
        "startLine": 437,
        "startChar": 2,
        "endLine": 441,
        "endChar": 16
      },
      "revId": "6ae0db74ff7cfd0c207e8d91ef8304f67b0a1702",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}