{
  "comments": [
    {
      "key": {
        "uuid": "3e9da6a6_62fd9b10",
        "filename": "client/run_isolated.py",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1161612
      },
      "writtenOn": "2018-03-22T19:20:18Z",
      "side": 1,
      "message": "Does this work if item is None?",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 519,
        "endChar": 37
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d461ec2_c3066d29",
        "filename": "client/run_isolated.py",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1000487
      },
      "writtenOn": "2018-03-22T20:11:58Z",
      "side": 1,
      "message": "I still don\u0027t understand why an item argument is needed at all. The caller should do these two.",
      "parentUuid": "3e9da6a6_62fd9b10",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 519,
        "endChar": 37
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ace8f867_8a26198f",
        "filename": "client/run_isolated.py",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1161612
      },
      "writtenOn": "2018-03-23T00:16:05Z",
      "side": 1,
      "message": "Just to avoid cut-and-pasting it to line 539 as well, but if you feel strongly we can change it - your call.",
      "parentUuid": "1d461ec2_c3066d29",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 519,
        "endChar": 37
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce2e5f39_d586ff0e",
        "filename": "client/run_isolated.py",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1000487
      },
      "writtenOn": "2018-03-23T00:39:23Z",
      "side": 1,
      "message": "I do because it\u0027s a layering confusion.",
      "parentUuid": "ace8f867_8a26198f",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 519,
        "endChar": 37
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74ef56e1_210e9bb3",
        "filename": "client/run_isolated.py",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1161612
      },
      "writtenOn": "2018-03-23T00:55:53Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "ce2e5f39_d586ff0e",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 519,
        "endChar": 37
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eda6612_5a5c0116",
        "filename": "client/run_isolated.py",
        "patchSetId": 2
      },
      "lineNbr": 519,
      "author": {
        "id": 1245214
      },
      "writtenOn": "2018-03-23T20:24:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74ef56e1_210e9bb3",
      "range": {
        "startLine": 518,
        "startChar": 0,
        "endLine": 519,
        "endChar": 37
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0837130_e697b977",
        "filename": "client/run_isolated.py",
        "patchSetId": 2
      },
      "lineNbr": 521,
      "author": {
        "id": 1161612
      },
      "writtenOn": "2018-03-22T19:20:18Z",
      "side": 1,
      "message": "recursively?",
      "range": {
        "startLine": 521,
        "startChar": 46,
        "endLine": 521,
        "endChar": 62
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b99af8a4_4c6981ce",
        "filename": "client/run_isolated.py",
        "patchSetId": 2
      },
      "lineNbr": 521,
      "author": {
        "id": 1245214
      },
      "writtenOn": "2018-03-23T20:24:39Z",
      "side": 1,
      "message": "Not sure. Moved it to after symlink resolution to be safe.",
      "parentUuid": "d0837130_e697b977",
      "range": {
        "startLine": 521,
        "startChar": 46,
        "endLine": 521,
        "endChar": 62
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f275e0e_a2dc5f5a",
        "filename": "client/tests/run_isolated_test.py",
        "patchSetId": 2
      },
      "lineNbr": 966,
      "author": {
        "id": 1161612
      },
      "writtenOn": "2018-03-22T19:56:07Z",
      "side": 1,
      "message": "Instead of one big test, you can create several:\n\n  * Normal file\n  * Symlink to file\n  * Symlink to symlink to file\n  * Symlink to [symlink to] directory\n  * Broken symlink\n  * Symlink to broken symlink\n  * Directory contains symlink to file in its parent\n  * Symlink to a directory\u0027s parent (what will happen!?)\n\nI\u0027m sure you can come up with more!\n\nIdeally, you\u0027ll also be able to confirm that the failures are logged. If you can\u0027t do it automatically, but the logs are printed to stdout/stderr, you can mention in a comment somewhere that you verified manually that they\u0027re being printed out.",
      "range": {
        "startLine": 966,
        "startChar": 6,
        "endLine": 966,
        "endChar": 18
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "969ac2bf_971e13ae",
        "filename": "client/tests/run_isolated_test.py",
        "patchSetId": 2
      },
      "lineNbr": 966,
      "author": {
        "id": 1245214
      },
      "writtenOn": "2018-03-23T20:24:39Z",
      "side": 1,
      "message": "I added more tests, and realized there were things that were not handles in copy_tree, so modified that too. I also decided to call link_outputs_to_outdir instead of calling copy_tree directly, because that function takes care of constructing the directory structure.\n\nCurrently, copy_tree doesn\u0027t handle cyclic symlinks. What is the desired behavior? For example,\n what do we want in out_dir for these cases:\n\n(1)  [dir1]---[dir2]---(symlink_to_dir1)\n\n(2)  [dir1]---[dir2]|---(symlink_to_dir1)\n                    |-----(file_in_dir2)\n\n(3)  [dir1]|---[dir2]------------(symlink_to_dir1)\n           |---(file_in_dir1)",
      "parentUuid": "5f275e0e_a2dc5f5a",
      "range": {
        "startLine": 966,
        "startChar": 6,
        "endLine": 966,
        "endChar": 18
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bd6d1c6_34b7086f",
        "filename": "client/tests/run_isolated_test.py",
        "patchSetId": 2
      },
      "lineNbr": 966,
      "author": {
        "id": 1161612
      },
      "writtenOn": "2018-03-23T20:33:08Z",
      "side": 1,
      "message": "Cyclic: M-A has the final say, but at least for now I\u0027d say it\u0027s fine not to do anything special to track this (eg look for a cycle). Just tell users not to do it.",
      "parentUuid": "969ac2bf_971e13ae",
      "range": {
        "startLine": 966,
        "startChar": 6,
        "endLine": 966,
        "endChar": 18
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c33b1d51_a9077a5e",
        "filename": "client/tests/run_isolated_test.py",
        "patchSetId": 2
      },
      "lineNbr": 966,
      "author": {
        "id": 1000487
      },
      "writtenOn": "2018-03-23T20:40:11Z",
      "side": 1,
      "message": "I\u0027m fine with a \"TODO(sadafm): Explicitly handle cyclic symlinks.\" and crash for now. Once we have a use case we\u0027ll have a reason to fix it. :)",
      "parentUuid": "1bd6d1c6_34b7086f",
      "range": {
        "startLine": 966,
        "startChar": 6,
        "endLine": 966,
        "endChar": 18
      },
      "revId": "0310a6ab7663964a6abe1ccc3a79de0fc28a502b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}