{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0bf9e8cb_a06cfd2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-04-30T00:38:26Z",
      "side": 1,
      "message": "PTAL",
      "revId": "0318579a649a8c70610fecd15e0ecd9d06ff3424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bba009e8_563e493a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2024-04-30T00:46:56Z",
      "side": 1,
      "message": "There\u0027s a global limit (25K) on various combinations of different dimensions. Right now we are at ~6K (see \"Bot classes\" at http://shortn/_7jezgg00ZS). Due to how bot updating happens (and bots reporting their version as a dimension value), the real limit is more like 12K.\n\nI\u0027m beginning to worry that we keep adding more and more stuff into dimensions. Just adding one new dimension with two possible values may, at worst, double the number of bot classes.\n\nWill display resolution be used for scheduling? If not, maybe it is OK to add it to \"get_state()\" instead? Then for each concrete bot you will be able to see the resolution it has. https://screenshot.googleplex.com/7jxPrtehKshwXPA \n\nThere are also APIs to list states of all bots. There\u0027s no API to search based on state though.",
      "revId": "0318579a649a8c70610fecd15e0ecd9d06ff3424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ceb535f8_e06384e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2024-04-30T15:24:03Z",
      "side": 1,
      "message": "The intended usage is to automatically quarantine misconfigured machines.\nMaybe we can do it in puppet instead?\nWe could also simplify this to a single \"width x height\" dimension.",
      "parentUuid": "bba009e8_563e493a",
      "revId": "0318579a649a8c70610fecd15e0ecd9d06ff3424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a011f11f_e76445a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-04-30T17:10:34Z",
      "side": 1,
      "message": "We shouldn\u0027t need this for scheduling, so moving this to get_state should be fine. I\u0027ll upload a new version later today.\n\n\u003e There are also APIs to list states of all bots. There\u0027s no API to search based on state though.\n\nThat should be sufficient to get the list of valid resolutions that we want to enforce. Can you point me to documentation on these APIs?",
      "parentUuid": "ceb535f8_e06384e0",
      "revId": "0318579a649a8c70610fecd15e0ecd9d06ff3424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7bac087_9fb9e604",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2024-04-30T18:28:16Z",
      "side": 1,
      "message": "Moved to `get_state()`.",
      "parentUuid": "a011f11f_e76445a5",
      "revId": "0318579a649a8c70610fecd15e0ecd9d06ff3424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aaf543c_3ef4a4dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2024-04-30T21:12:18Z",
      "side": 1,
      "message": "\u003e Can you point me to documentation on these APIs?\n\nIt is just the bot listing API, e.g. https://chromium.googlesource.com/infra/luci/luci-go/+/refs/heads/main/swarming/proto/api_v2/swarming.proto#54 The state is a JSON-string in `state` field https://chromium.googlesource.com/infra/luci/luci-go/+/refs/heads/main/swarming/proto/api_v2/swarming.proto#983\n\nIn `swarming` CLI it is also returned by `bots` subcommand, e.g.\n\n\n```\n\u003e swarming bots -S chromium-swarm.appspot.com -dimension pool\u003dluci.chromium.ci\n...\n  \"task_name\": \"bb-8749204643883781841-chromium/ci/Windows deterministic-24521\",\n  \"version\": \"a4425343ce27e9d5841379ce38c374db2cec72715c730bd0865c589bb2dabe1b\",\n  \"state\": \"{\\\"audio\\\":[],\\\"bot_config\\\":{\\\"name\\\":\\\"bot_config.py\\\",\\\"revision\\\":\\\"6ed1c135649e7bfd4a3c1d19375a10a1238f49f3\\\"},\\\"bot_group_cfg_version\\\":\\\"hash:be77159de73158\\\",\\\"cost_usd_hour\\\":1.2868843695746528,\\\"cpu_name\\\":\\\"Intel(R) Xeon(R) CPU Cascade Lake GCE\\\",\\\"cwd\\\":\\\"C:\\\\\\\\b\\\\\\\\s\\\",\\\"cygwin\\\":[false],\\\"disks\\\":{\\\"c:\\\\\\\\\\\":{\\\"free_mb\\\":472579.5,\\\"size_mb\\\":509998.0}},\\\"env\\\":{\\\"PATH\\\":\\\"C:\\\\\\\\Program F.....\n }\n]\n```\n\n(still need to parse it separately though)",
      "parentUuid": "e7bac087_9fb9e604",
      "revId": "0318579a649a8c70610fecd15e0ecd9d06ff3424",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}