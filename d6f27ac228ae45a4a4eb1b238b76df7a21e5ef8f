{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "38aa0e22_c5c9a526",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1547372
      },
      "writtenOn": "2023-11-01T19:22:03Z",
      "side": 1,
      "message": "I\u0027ve verified the following cases:\n1. credentials not found (I deleted `.config/chrome-infra/auth`)\n2. credentials are found",
      "revId": "d6f27ac228ae45a4a4eb1b238b76df7a21e5ef8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfd37ef6_ded9795c",
        "filename": "appengine/swarming/ui2/webpack.config.js",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2023-11-01T20:16:53Z",
      "side": 1,
      "message": "This will return a token that can expire as soon as 1m from now (see `-lifetime` in `luci-auth token -help`). IIUC findLiveDemoTokens() is called only once. One option would be to set `-lifetime 20m` or something, but the token will still eventually expire.\n\nAnother option is to use `luci-auth token -json-output -` and use `expiry` field from the output to know when this token expires, and ask a new one when it does. It means /auth/openid/state bypass will have to call some function every time.\n\nI guess /auth/openid/state bypass can also just always call the current implementation of findLiveDemoTokens(), and it will be mostly OK, except `luci-auth info` actually makes a backend call to resolve the token and thus it is relatively slow. We can precache email, but keep always calling `luci-auth token` (it should be super fast if the token is up-to-date).",
      "range": {
        "startLine": 82,
        "startChar": 35,
        "endLine": 82,
        "endChar": 68
      },
      "revId": "d6f27ac228ae45a4a4eb1b238b76df7a21e5ef8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2064a098_d9e8266f",
        "filename": "appengine/swarming/ui2/webpack.config.js",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1547372
      },
      "writtenOn": "2023-11-02T15:06:35Z",
      "side": 1,
      "message": "Thanks for the comment! Was not aware of the `-lifetime` flag. Ended up doing the 3rd option + longer lifetime to make token refresh over network less likely.",
      "parentUuid": "bfd37ef6_ded9795c",
      "range": {
        "startLine": 82,
        "startChar": 35,
        "endLine": 82,
        "endChar": 68
      },
      "revId": "d6f27ac228ae45a4a4eb1b238b76df7a21e5ef8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baa5eda3_79e0d931",
        "filename": "appengine/swarming/ui2/webpack.config.js",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2023-11-01T20:16:53Z",
      "side": 1,
      "message": "This is unfortunate. This output can change in the future, it was not meant to be parsed like that.\n\nWhat email is used for here?",
      "range": {
        "startLine": 116,
        "startChar": 4,
        "endLine": 120,
        "endChar": 20
      },
      "revId": "d6f27ac228ae45a4a4eb1b238b76df7a21e5ef8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fba614f_25daefcb",
        "filename": "appengine/swarming/ui2/webpack.config.js",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1547372
      },
      "writtenOn": "2023-11-02T15:06:35Z",
      "side": 1,
      "message": "The email is inserted in the title of termination tasks if you create it from the UI and is also displayed as the \"logged in\" user. \nI\u0027m okay if this breaks in the future and we need to change the parsing logic. Otherwise we can always use a `dummy` email. I have no strong feelings either way. Wdyt?  \n\nMight make sense to add a `json` output mode to `luci-auth info` to make this data more parsable?",
      "parentUuid": "baa5eda3_79e0d931",
      "range": {
        "startLine": 116,
        "startChar": 4,
        "endLine": 120,
        "endChar": 20
      },
      "revId": "d6f27ac228ae45a4a4eb1b238b76df7a21e5ef8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "627a50e1_88f076e0",
        "filename": "appengine/swarming/ui2/webpack.config.js",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2023-11-02T17:18:31Z",
      "side": 1,
      "message": "Yeah. Options are:\n1. Add `email` field to `luci-auth token -json-output` output.\n2. Add -json-output to `luci-auth info` (but if you just need an email, it will suck, since it always makes a request to resolve the token, even though email is usually already cached locally).\n3. Add `luci-auth email` that just fetches email from the cache.\n\nEh, no big deal.",
      "parentUuid": "9fba614f_25daefcb",
      "range": {
        "startLine": 116,
        "startChar": 4,
        "endLine": 120,
        "endChar": 20
      },
      "revId": "d6f27ac228ae45a4a4eb1b238b76df7a21e5ef8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}