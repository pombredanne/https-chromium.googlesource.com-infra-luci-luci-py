{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fe44b3b9_6679fcd9",
        "filename": "appengine/swarming/server/task_request.py",
        "patchSetId": 8
      },
      "lineNbr": 642,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2023-08-25T21:34:59Z",
      "side": 1,
      "message": "This is not called in https://source.chromium.org/chromium/infra/infra/+/main:luci/appengine/swarming/server/task_scheduler.py;l\u003d1824?q\u003d%22int(utils.time_time()%20*%201e9)%22\u0026ss\u003dchromium nor in https://chromium-review.googlesource.com/c/infra/luci/luci-py/+/4770638/12\n\nI find this suspicious. Is anything storing update_id back into datastore after updating (I haven\u0027t reviewed the next CL yet, maybe it is stored there somewhere)?",
      "range": {
        "startLine": 641,
        "startChar": 0,
        "endLine": 642,
        "endChar": 49
      },
      "revId": "6c083ecae390d47a0f080ff6ef6fd5090aba95df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d782805b_f85d527f",
        "filename": "appengine/swarming/server/task_request.py",
        "patchSetId": 8
      },
      "lineNbr": 642,
      "author": {
        "id": 1551397
      },
      "writtenOn": "2023-08-28T14:24:26Z",
      "side": 1,
      "message": "Yeah good point. Now that I take a look at it again, this function doesn\u0027t really serve much of a purpose besides the one case in this CL.\n\nin task_scheduler, it is not used because in the next CL (that you linked), the code gets refactored, and a new function `_buildbucket_update(request_key, run_result_state, update_id)` uses the update_id provided in the args. This is because update_id will be sent as part of the payload to the task queue. It was sent as part of the payload to ensure that when `update_id` and `latest_task_status` were stored in `BuildTask`, only the latest non-stale entities were stored.\n\nI think I will remove this function then.\n\nWDYT?",
      "parentUuid": "fe44b3b9_6679fcd9",
      "range": {
        "startLine": 641,
        "startChar": 0,
        "endLine": 642,
        "endChar": 49
      },
      "revId": "6c083ecae390d47a0f080ff6ef6fd5090aba95df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea3c17b0_cd0214a3",
        "filename": "appengine/swarming/server/task_request.py",
        "patchSetId": 8
      },
      "lineNbr": 642,
      "author": {
        "id": 1551397
      },
      "writtenOn": "2023-08-28T14:24:26Z",
      "side": 1,
      "message": "Yea",
      "parentUuid": "fe44b3b9_6679fcd9",
      "range": {
        "startLine": 641,
        "startChar": 0,
        "endLine": 642,
        "endChar": 49
      },
      "revId": "6c083ecae390d47a0f080ff6ef6fd5090aba95df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1017ff2_7ffd8e42",
        "filename": "appengine/swarming/server/task_request.py",
        "patchSetId": 8
      },
      "lineNbr": 642,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2023-08-28T22:38:16Z",
      "side": 1,
      "message": "Ok. As long as there are no multiple copies of `int(utils.time_time() * 1e9)` line.",
      "parentUuid": "ea3c17b0_cd0214a3",
      "range": {
        "startLine": 641,
        "startChar": 0,
        "endLine": 642,
        "endChar": 49
      },
      "revId": "6c083ecae390d47a0f080ff6ef6fd5090aba95df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37ef6d68_08e395e3",
        "filename": "appengine/swarming/server/task_request.py",
        "patchSetId": 8
      },
      "lineNbr": 642,
      "author": {
        "id": 1551397
      },
      "writtenOn": "2023-08-29T17:11:58Z",
      "side": 1,
      "message": "So in the end there should be a total of 3 `int(utils.time_time() * 1e9)` calls.\n\n1. The first in backend_conversions to set the inital update_id when instantiating BuildTask. This is changed in this CL.\n\nIn the follow up CL, the other cases come up:\n\n2. During `task_scheduler._maybe_taskupdate_notify_via_tq`. This handles sending the updates via pubsub for non `bot_update_task` updates (bot_reap_task, cancel_task...)\n\n3. And during `task_scheduler.bot_update_task`, when we send update_id to `_buildbucket_update` to perform the pubsub update. This is live and not via tq. We could technically use _maybe_taskupdate_notify_via_tq during `bot_update_task`, but the pattern for the other pubsub messages is to send it live and not via tq.\n\nWe need both of these calls because the `update_id` must be set before sending an update to tq, and in order to abstract the logic to send buildbucket updates live or via tq, the `_buildbucket_update` function needs to take in update_id as an input. So there is \"repetition\" but it is needed since both events need to track `update_id` differently (live or before sending an update to tq).\n\nI removed the `bump_update_id`. The follow up CL is now up to date reflecting these changes.",
      "parentUuid": "e1017ff2_7ffd8e42",
      "range": {
        "startLine": 641,
        "startChar": 0,
        "endLine": 642,
        "endChar": 49
      },
      "revId": "6c083ecae390d47a0f080ff6ef6fd5090aba95df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}