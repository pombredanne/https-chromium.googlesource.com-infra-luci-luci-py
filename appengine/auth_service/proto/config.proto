// Copyright 2015 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Configuration schema for configs fetched via a config service.
//
// See also //components/auth/proto/security_config.proto for the schema of
// 'security.cfg', which is distributed to all linked services as is as part
// of AuthDB proto.

syntax = "proto3";

package auth_service;


// Auth service configuration that applies specifically to the service, not to
// any linked services.
//
// Provided via 'settings.cfg' config file.
message SettingsCfg {
  // Enable ts_mon based monitoring.
  bool enable_ts_monitoring = 1;

  // If set, store the latest AuthDB snapshot in Google Storage.
  //
  // Should have format "<bucket>/<prefix>".
  //
  // Auth service will take ownership of two objects there:
  //   1. latest.json: JSON-serialized AuthDBRevision proto.
  //   2. latest.db: binary-serialized SignedAuthDB with actual AuthDB data.
  //
  // When AuthDB changes, Auth service updates latest.db, then latest.json, and
  // finally sends a PubSub notification.
  //
  // Consumers can either poll latest.json for changes, or they can setup
  // a PubSub subscription via /auth_service/api/v1/authdb/subscription/ to get
  // notified.
  //
  // Requires at least one AuthDB change (e.g. a group update) for the files
  // to appear after setting or changing auth_db_gs_path.
  //
  // When changing or removing auth_db_gs_path, files at the old location are
  // not automatically cleaned up.
  string auth_db_gs_path = 2;
}

// Configuration of groups imported from external sources.
//
// Provided via 'imports.cfg' config file.
message GroupImporterConfig {
  // Periodically fetch a tarball with groups stored as individual files.
  message TarballEntry {
    // Where to import data from.
    string url = 1;
    // List of OAuth scopes to use for authentication (or empty to skip auth).
    repeated string oauth_scopes = 2;
    // Email domain to append to imported identities.
    string domain = 3;
    // List of group systems expected to be found in the archive. They act as
    // prefixes to group names, e.g 'ldap'. Each system corresponds to
    // a subdirectory in the tarball. Each tarball may have groups from multiple
    // external systems, but groups from some external system must not be split
    // between multiple tarballs. When importer sees <group system name>/* in
    // a tarball, it modifies group list from that system on the auth_service to
    // match group list in the tarball _exactly_. For example it removes groups
    // that are on the server, but no longer present in the tarball.
    repeated string systems = 4;
    // List of groups to import from the tarball (as filenames relative to
    // tarball root, e.g. 'ldap/some-group'). If empty, imports all groups in
    // the tarball.
    repeated string groups = 5;
  }

  // Accept a tarball upload from some external service.
  //
  // Same as 'TarballEntry', except the tarball is pushed to the service (via
  // PUT to /auth_service/api/v1/importer/ingest_tarball/<name>) rather than
  // being fetched from somewhere. See 'TarballEntry' comments for details.
  message TarballUploadEntry {
    // Identifies this particular entry. Used in push API requests.
    string name = 1;
    // A service account email that is allowed to do this push.
    repeated string authorized_uploader = 2;
    // Email domain to append to imported identities.
    string domain = 3;
    // List of group systems expected to be found in the archive.
    repeated string systems = 4;
    // List of groups to import from the tarball.
    repeated string groups = 5;
  }

  // Periodically fetch a single group stored as a plain list of identities.
  message PlainlistEntry {
    // Where to import data from.
    string url = 1;
    // List of OAuth scopes to use for authentication (or empty to skip auth).
    repeated string oauth_scopes = 2;
    // Email domain to append to imported identities.
    string domain = 3;
    // A name of imported group. The full group name will be 'external/<group>'.
    string group = 4;
  }

  repeated TarballEntry tarball = 1;
  repeated PlainlistEntry plainlist = 2;
  repeated TarballUploadEntry tarball_upload = 3;
}


// Global config. Includes OAuth client_id allowlist and token server URL.
//
// Provided via 'oauth.cfg' config file.
message OAuthConfig {
  // ClientID returned by /auth/api/v1/server/oauth_config endpoint to clients.
  string primary_client_id = 1;
  // Client secret (that's not really a secret, since it is visible) returned
  // by /auth/api/v1/server/oauth_config endpoint to clients. Corresponding
  // callback URL must be localhost or urn:ietf:wg:oauth:2.0:oob.
  string primary_client_secret = 2;
  // Allowlist of all accepted client_ids (in addition to the primary one).
  repeated string client_ids = 3;
  // URL of a token server to use to generate delegation tokens.
  string token_server_url = 4;
}


// IP allowlists config: a set of named IP allowlists and a mapping between
// identity name -> IP allowlist to restrict it to.
message IPAllowlistConfig {
  message IPAllowlist {
    // Name of the IP allowlist.
    string name = 1;
    // List of subnets.
    repeated string subnets = 2;
    // Names of other IPAllowlist entities to include.
    repeated string includes = 3;
  }

  message Assignment {
    // Identity to restrict IPs to.
    string identity = 1;
    // Name of the corresponding IPAllowlist with a set of subnets.
    string ip_allowlist_name = 2;
  }

  // A set of named subnets.
  repeated IPAllowlist ip_allowlists = 1;
  // A mapping "identity name -> IP allowlist name".
  repeated Assignment assignments = 2;
}

// NOTE: There is another definition here:
// https://chromium.googlesource.com/infra/luci/luci-go/+/refs/heads/main/server/auth/service/protocol/components/auth/proto/realms.proto#72
// these two must always stay the same.
//
//
// Permission is a symbol that has form "<service>.<subject>.<verb>", which
// describes some elementary action ("<verb>") that can be done to some category
// of resources ("<subject>"), managed by some particular kind of LUCI service
// ("<service>").
//
// Within each individual realm (see Realm message), a principal (such as an end
// user or a service account) can have zero or more permissions that describe
// what this user can actually do to resources belonging to the realm. See Realm
// message for the definition of what "belonging to the realm" means.
//
// Examples of permissions:
//   * buildbucket.build.create
//   * swarming.pool.listBots
//   * swarming.task.cancel
//
// Note that permission names are composed of generic terms, not some specific
// IDs of service deployments or resources. Generally, using a concrete
// permission name in the service's source code as a constant should look
// natural.
//
// A permission can be marked as "internal". Internal permissions are not
// allowed to appear in custom roles in user-defined project realms.cfg files.
// They can be used in internal realms (defined in realms.cfg in the LUCI Auth
// service config set, see comments for Realm message) and they are added to
// some predefined roles by the LUCI Auth service itself. They are used to setup
// ACLs for internal interactions between LUCI components.
//
// Each individual LUCI service should document what permissions it checks and
// when. It becomes a part of service's public API. Usually services should
// check only permissions of resources they own (e.g. "<service>.<subject>.*"),
// but in exceptional cases they may also check permissions intended for other
// services. This is primarily useful for services that somehow "proxy" access
// to resources.
//
// Field `permissions` in Realms message describes all permissions known to the
// LUCI Auth service. The LUCI Auth service guarantees that all permissions
// mentioned in all realms (in `realms` field) are among `permissions` set.
//
// If a LUCI service checks a permission that is no longer (or not yet) listed
// in the `permissions` set, the check should succeed with "no permission"
// result, and produce a warning in service's logs.
message Permission {
  string name = 1;  // "<service>.<subject>.<verb>"
  bool internal = 2; // internal permissions cannot be used in project realms
}


// Provided via 'permissions.cfg' config file.
// Defines the list of roles and their respective permissions.
message PermissionsConfig {
  // Defines a role that includes given permissions and other roles.
  // The role should not have been defined before. To include this role into another
  // role, you can specify this role by name.
  message Role {
    // Identifier for a role, will have the form <prefix><project>.<noun>
    //  examples:
    //    "role/exampleproject.reader"
    //    "role/exampleproject.owner"
    //
    // Prefixes:
    //  "role/" -- role names defined in Auth service code.
    //  "customRole/" -- role names that can be defined in user-supplied realms.cfg.
    //  "role/luci.internal." -- interally used roles that are forbidden in realms.cfg.
    string name = 1;

    // List of permissions associated with this role, same permission may not be
    // declared more than once per role.
    // Permissions should be of the form: <service>.<subject>.<verb>
    repeated Permission permissions = 2;

    // List of other roles to include in this role, includes all the permissions
    // that the included role contains. The referenced role should be defined already.
    repeated string includes = 3;
  }

  // Representation of all defined roles.
  repeated Role role = 1;

  // Defines attributes that can be referenced in certain conditions.
  repeated string attribute = 2;
}