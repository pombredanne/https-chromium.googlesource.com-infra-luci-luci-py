// Copyright 2022 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

package swarming.internals.rbe;

option go_package = "go.chromium.org/luci/swarming/proto/internals;internalspb";

import "google/protobuf/timestamp.proto";


// ServerSecret is available to both Python and Go servers and used to HMAC
// serialized proto message.
//
// It allows to pass HMAC-tagged blobs from the Python server to the Go server
// via an untrusted intermediary (a bot process).
//
// There's one active key used for HMAC-tagging new blobs and zero or more
// inactive keys that can be used to verify HMAC-tagged blobs. All keys are
// managed by the Python side. The Go side just periodically refetches this
// proto and uses non-expired keys from it to check HMACs.
message ServerSecret {
  string id = 1;  // ID of this secret to identify it in the storage
  message Key {
    string id = 1;                         // unique ID of this particular key
    bytes key = 2;                         // the actual secret key
    google.protobuf.Timestamp created = 3; // when it was created
    google.protobuf.Timestamp expiry = 4;  // when it should no longer be used
  }
  repeated Key keys = 2;
}


// TaggedMessage is an envelope for an HMAC-tagged protobuf message.
//
// An ID of ServerSecret that was used for tagging should be communicated off
// band (or just hardcoded). The ID of a key that was used for tagging is stored
// in the proto as `key_id`. This key is one of the keys in the ServerSecret.
//
// hmac_sha256 is calculated as:
//   hmac_sha256("%d" % payload_type + "\n" + payload, secret.keys[key_id]).
message TaggedMessage {
  enum PayloadType {
    PAYLOAD_TYPE_UNSPECIFIED = 0;
    POLL_STATE = 1;  // payload is wirepb-serialized PollState
  }
  PayloadType payload_type = 1;  // identifies the payload proto message type
  bytes payload = 2;             // the serialized payload proto message
  string key_id = 3;             // identifies a concrete HMAC key used
  bytes hmac_sha256 = 4;         // HMAC of the payload, see the comment above
}


// PollState is produced by the Python server and passed to the Go server.
//
// It is passed as a TaggedMessage that uses "rbe_poll_state" secret for the
// HMAC tag. Once the tag is verified, the Go server can trust that this message
// was generated by the Python server and was not tampered with.
//
// It is generated by "/bot/poll" endpoint for bots in the RBE mode. Such bots
// then pass it to the "/bot/rbe/..." endpoints. It contains RBE-related
// parameters for this particular bot produced based on the bot credentials and
// Python server configs.
//
// It also contains instructions how to authenticate the bot on the Go side.
// They are derived based on how the Python server authenticated this particular
// bot. They are tightly coupled to swarming.config.BotAuth message.
//
// Once the Go server verifies the HMAC tag, and checks that the bot presented
// the exact same credentials as used by the Python side, the Go side can trust
// that this message was not tampered with and was not "substituted" (i.e.
// taken from one bot and replayed on another).
message PollState {
  // Full RBE instance name to use.
  string rbe_instance = 1;

  // Override these particular dimensions when contacting RBE.
  //
  // These values will be used instead of whatever the bot is reporting. This is
  // used for security-sensitive dimensions like `id` and `pool`.
  //
  // `id` is always populated and has a single value matching the bot ID.
  message Dimension {
    string key = 1;
    repeated string values = 2;
  }
  repeated Dimension enforced_dimensions = 2;

  // Information for logs and debugging (not passed to RBE).
  message DebugInfo {
    google.protobuf.Timestamp created = 1;  // when this message was created
    string swarming_version = 2;            // version of the Swarming code
    string request_id = 3;                  // ID of the "/bot/poll" request
  }
  DebugInfo debug_info = 3;

  //////////////////////////////////////////////////////////////////////////////
  // Authentication.

  // If set, use `X-Luci-Gce-Vm-Token` header for auth.
  //
  // This header should contain JWT with signed VM metadata with the following
  // expectations:
  //   * Audience matches https://[*-dot-]<app>.appspot.com
  //   * google.compute_engine.project_id field matches `gce_project`.
  //   * google.compute_engine.instance_name matches `gce_instance`.
  message GCEAuth {
    string gce_project = 1;
    string gce_instance = 2;
  }

  // If set, use `Authorization` header with OAuth2 access tokens for auth.
  //
  // The token should have "https://www.googleapis.com/auth/userinfo.email"
  // scope and belong to the given service account.
  message ServiceAccountAuth {
    string service_account = 1;
  }

  // If set, use `X-Luci-Machine-Token` header with LUCI machine token.
  //
  // The token should have the corresponding FQDN in it.
  message LUCIMachineTokenAuth {
    string machine_fqdn = 1;
  }

  // If set, use only `ip_allowlist` field for auth (see below).
  message IPAllowlistAuth {
    // No fields.
  }

  // If set, the bot should be in the corresponding IP allowlist (in addition
  // to the primary auth check described by auth_method). Always set if
  // auth_method is IPAllowlistAuth.
  string ip_allowlist = 10;

  // Describes how to authenticate the bot. See swarming.config.BotAuth.
  //
  // Must be set.
  oneof auth_method {
    GCEAuth gce_auth = 11;
    ServiceAccountAuth service_account_auth = 12;
    LUCIMachineTokenAuth luci_machine_token_auth = 13;
    IPAllowlistAuth ip_allowlist_auth = 14;
  }
}
