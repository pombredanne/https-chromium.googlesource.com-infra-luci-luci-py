// Copyright 2022 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

package swarming.internals.rbe;

option go_package = "go.chromium.org/luci/swarming/proto/internals;internalspb";

import "google/protobuf/timestamp.proto";


// TaggedMessage is an envelope for an HMAC-tagged protobuf message.
//
// A secret key that was used for tagging should be communicated off band (e.g.
// stored in some pre-agreed Google Secret Manager secret).
//
// hmac_sha256 is calculated as:
//   hmac_sha256("%d" % payload_type + "\n" + payload, secret_key).
message TaggedMessage {
  enum PayloadType {
    PAYLOAD_TYPE_UNSPECIFIED = 0;
    POLL_STATE = 1;   // payload is wirepb-serialized PollState
    BOT_SESSION = 2;  // payload is wirepb-serialized BotSession
  }
  PayloadType payload_type = 1;  // identifies the payload proto message type
  bytes payload = 2;             // the serialized payload proto message
  bytes hmac_sha256 = 3;         // HMAC of the payload, see the comment above
}


// PollState is produced by the Python server and passed to the Go server.
//
// It travels wrapped in a TaggedMessage. Once the HMAC tag is verified, the Go
// server can trust that this message was generated by the Python server and was
// not tampered with.
//
// It is generated by "/bot/poll" endpoint for bots in the RBE mode. Such bots
// then pass it to the "/bot/rbe/..." endpoints. It contains RBE-related
// parameters for this particular bot produced based on the bot credentials and
// Python server configs.
//
// It also contains instructions how to authenticate the bot on the Go side.
// They are derived based on how the Python server authenticated this particular
// bot. They are tightly coupled to swarming.config.BotAuth message.
//
// Once the Go server verifies the HMAC tag, and checks that the bot presented
// the exact same credentials as used by the Python side, the Go side can trust
// that this message was not tampered with and was not "substituted" (i.e.
// taken from one bot and replayed on another).
message PollState {
  // Unique ID of this message (primary to correlate logs that use it).
  string id = 1;

  // Expiration time of this message. It should not be used once it expires.
  google.protobuf.Timestamp expiry = 2;

  // Full RBE instance name to use.
  string rbe_instance = 3;

  // Override these particular dimensions when contacting RBE.
  //
  // These values will be used instead of whatever the bot is reporting. This is
  // used for security-sensitive dimensions like `id` and `pool`.
  //
  // `id` is always populated and has a single value matching the bot ID.
  message Dimension {
    string key = 1;
    repeated string values = 2;
  }
  repeated Dimension enforced_dimensions = 4;

  // Information for logs and debugging (not passed to RBE).
  message DebugInfo {
    google.protobuf.Timestamp created = 1;  // when this message was created
    string swarming_version = 2;            // version of the Swarming code
    string request_id = 3;                  // ID of the "/bot/poll" request
  }
  DebugInfo debug_info = 5;

  //////////////////////////////////////////////////////////////////////////////
  // Instructions for the Go server how to authenticate the bot.

  // If set, use `X-Luci-Gce-Vm-Token` header for auth.
  //
  // This header should contain JWT with signed VM metadata with the following
  // expectations:
  //   * Audience matches https://[*-dot-]<app>.appspot.com
  //   * google.compute_engine.project_id field matches `gce_project`.
  //   * google.compute_engine.instance_name matches `gce_instance`.
  message GCEAuth {
    string gce_project = 1;
    string gce_instance = 2;
  }

  // If set, use `Authorization` header with OAuth2 access tokens for auth.
  //
  // The token should have "https://www.googleapis.com/auth/userinfo.email"
  // scope and belong to the given service account.
  message ServiceAccountAuth {
    string service_account = 1;
  }

  // If set, use `X-Luci-Machine-Token` header with LUCI machine token.
  //
  // The token should have the corresponding FQDN in it.
  message LUCIMachineTokenAuth {
    string machine_fqdn = 1;
  }

  // If set, use only `ip_allowlist` field for auth (see below).
  message IPAllowlistAuth {
    // No fields.
  }

  // If set, the bot should be in the corresponding IP allowlist (in addition
  // to the primary auth check described by auth_method). Always set if
  // auth_method is IPAllowlistAuth.
  string ip_allowlist = 10;

  // Describes how to authenticate the bot. See swarming.config.BotAuth.
  //
  // Must be set.
  oneof auth_method {
    GCEAuth gce_auth = 11;
    ServiceAccountAuth service_account_auth = 12;
    LUCIMachineTokenAuth luci_machine_token_auth = 13;
    IPAllowlistAuth ip_allowlist_auth = 14;
  }
}


// BotSession carries an RBE bot session ID and the latest validated PollState.
//
// It travels wrapped in a TaggedMessage. It is produced and verified by the
// Go server whenever the bot calls CreateBotSession or UpdateBotSession.
//
// It serves two purposes:
//   1. Protect the RBE bot session ID from tampering by the bot (e.g. prevents
//      the bot from using a different bot session ID of a bot in another pool).
//   2. Preserve parameters of the last known PollState (in particular auth
//      ones) and bind the session ID to them, so even if the bot has a valid
//      BotSession token from another bot, it won't be able to use them (because
//      it will fail the auth check encoded in the PollState).
//
// The original PollState token has limited expiration time and it expires if
// the bot doesn't refresh it by calling the polling endpoint served by the
// Python server. When running a long task, the bot is not polling anything and
// can't refresh the PollState token. But it still periodically calls
// UpdateBotSession to send heartbeats to RBE. This is where PollState stored in
// BotSession token is verified.
//
// If a call to UpdateBotSession has both the PollState token and BotSession
// token (happens when a bot is polling new tasks from RBE), the information in
// the PollState token is used as authoritative since PollState tokens are
// generated by Python code based on the freshest state of bot configs.
// Information pulled from such PollState token is used to update BotSession
// token.
message BotSession {
  // ID of the RBE's BotSession.
  string rbe_bot_session_id = 1;

  // Poll state extracted from the last seen validated PollState token.
  //
  // Its `expiry` should be ignored in favor of `expiry` field in BotSession.
  PollState poll_state = 2;

  // Expiration time of this message. It should not be used once it expires.
  google.protobuf.Timestamp expiry = 3;
}
