// Copyright 2021 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// COPIED FROM go.chromium.org/luci/buildbucket/proto/build.proto

syntax = "proto3";

package bb;

import "google/protobuf/duration.proto";


message CacheEntry {
      // Identifier of the cache. Required. Length is limited to 128.
      // Must be unique in the build.
      //
      // If the pool of swarming bots is shared among multiple LUCI projects and
      // projects use same cache name, the cache will be shared across projects.
      // To avoid affecting and being affected by other projects, prefix the
      // cache name with something project-specific, e.g. "v8-".
      string name = 1;

      // Relative path where the cache in mapped into. Required.
      //
      // Must use POSIX format (forward slashes).
      // In most cases, it does not need slashes at all.
      //
      // In recipes, use api.path['cache'].join(path) to get absolute path.
      //
      // Must be unique in the build.
      string path = 2;

      // Duration to wait for a bot with a warm cache to pick up the
      // task, before falling back to a bot with a cold (non-existent) cache.
      //
      // The default is 0, which means that no preference will be chosen for a
      // bot with this or without this cache, and a bot without this cache may
      // be chosen instead.
      //
      // If no bot has this cache warm, the task will skip this wait and will
      // immediately fallback to a cold cache request.
      //
      // The value must be multiples of 60 seconds.
      google.protobuf.Duration wait_for_warm_cache = 3;

      // Environment variable with this name will be set to the path to the cache
      // directory.
      string env_var = 4;
    }


message SwarmingBackendConfig {
  // Task priority, the lower the more important.
  //
  // Valid values are between 1 and 255.
  int32 priority = 1;

  // Maximum delay (in seconds) between bot pings before the bot is considered
  // dead while running a task.
  //
  // When a task is running, the bot sends update to the server every
  // few seconds. In some cases, like when the system is overloaded,
  // the bot may be preempted and delayed in sending its updates.
  // After the delay specified here, the server will claim the bot to
  // be dead and will forcibly abort the task as BOT_DIED. This is to
  // catch system wide issues like a BSOD.
  int64 bot_ping_tolerance = 2;

  // Parent Swarming task run ID of the process requesting this task.
  //
  // This field is set on the children tasks when a Swarming task creates
  // children Swarming tasks.
  //
  // This points to the TaskResult.run_id (ending with '1', '2' or more).
  string parent_run_id = 3;

  // Defines what OAuth2 credentials the task uses when calling other services.
  //
  // Possible values are:
  //   - 'none': do not use a task service account at all, this is the default.
  //   - 'bot': use bot's own account, works only if bots authenticate with
  //       OAuth2.
  //  - <some email>: use this specific service account if it is allowed in the
  //       pool (via 'allowed_service_account' pools.cfg setting) and configured
  //       in the token server's service_accounts.cfg.
  //
  // Note that the service account name is specified outside of task properties,
  // and thus it is possible to have two tasks with different service accounts,
  // but identical properties hash (so one can be deduped). If this is
  // unsuitable use 'idempotent=False' or include a service account name in
  // properties separately.
  string service_account = 4;

  // When a task is scheduled and there are currently no bots available to run
  // the task, the TaskSlice can either be PENDING, or be denied immediately.
  // When denied, the next TaskSlice is enqueued, and if there's no following
  // TaskSlice, the task state is set to NO_RESOURCE. This should normally be
  // set to False to avoid unnecessary waiting.
  bool wait_for_capacity = 5;

  // CIPD package of the agent binary that should be called to run the task
  // command. Note that it will end with "${platform}"
  string agent_binary_cipd_pkg = 6;

  // CIPD package tag or ref of the agent binary.
  string agent_binary_cipd_vers = 7;

  // Name of the file within the CIPD package and should be used to construct
  // the task command line.
  string agent_binary_cipd_filename = 8;
}