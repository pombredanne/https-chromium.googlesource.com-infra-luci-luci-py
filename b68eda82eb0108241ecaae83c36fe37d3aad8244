{
  "comments": [
    {
      "key": {
        "uuid": "ed79df29_738cf447",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "i find it very non-obvious that \"default\" is a included in all realms of the project. \"defaults\" are usually not prepended to the explicitly specified stuff. I am worried that someone may define\n\n  realms {\n    name: \"@default\"\n    // by default, stuff is public\n  }\n\n  realms {\n    name: \"secret\"\n    // restricted ACLs\n  }\n\nand then get burned. This mistake is especially easy to do because \"extends\" is at the proto level: the generated config will reveal the mistake. Didn\u0027t we converge on simple flat verbose configs generated by concise starlark? why \"extends\" has to be at the proto level?",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffdcaf57_714170e0",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-02-14T03:20:52Z",
      "side": 1,
      "message": "\u003e i find it very non-obvious that \"default\" is a included in all realms of the project. \"defaults\" are usually not prepended to the explicitly specified stuff. I am worried that someone may define\n\u003e \n\u003e   realms {\n\u003e     name: \"@default\"\n\u003e     // by default, stuff is public\n\u003e   }\n\u003e \n\u003e   realms {\n\u003e     name: \"secret\"\n\u003e     // restricted ACLs\n\u003e   }\n\u003e \n\nThis is a good point; I agree with this. Perhaps \"@base\" would be clearer? Or \"@fallback\" to capture the checked-in-case-the-realm-no-longer-exists nature?\"\n\n\u003e and then get burned. This mistake is especially easy to do because \"extends\" is at the proto level: the generated config will reveal the mistake. Didn\u0027t we converge on simple flat verbose configs generated by concise starlark? why \"extends\" has to be at the proto level?\n\nHm... This is a good question, too; if we mandate the proto is (logically) fully normalized, then constructs like default/base could be purely in starlark (though fallback would still need to be explicitly defined).\n\nI say \"logically\" because it\u0027s possible that the fully normalized proto would be gigantic at a technically-challenging scale. \u0027logically\u0027 would mean that there\u0027s an automatic denormalization applied to the proto which is pushed down with the authdb (i.e. application-level compression; gzip wouldn\u0027t be sufficient because it would still require either streaming through the whole db at lookup-time or fully expanding it into memory, which may be a problem).\n\nAutomatically denormalizing would also provide better lookup characteristics than the human\u0027s logical constructs anyway.",
      "parentUuid": "ed79df29_738cf447",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "506fdafd_01b469a9",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-02-14T03:59:37Z",
      "side": 1,
      "message": "I agree \"@default\" is not a great name from that perspective. Maybe \"@root\"? \"@base\" is also ok.\n\nWhy we need it at all and why we must include it everywhere, implicitly:\n1. Resource may point to deleted realms. We need a way to specify what ACLs to use in this case, since otherwise such resources becomes totally inaccessible and thus \"unfixable\". It is the primary reason why @default realm is needed at all.\n2. Now imagine we do NOT inherit from @default realm. There may be realm with very limiting ACL (smaller than @default). If such realm is deleted, suddenly all its resources now have @default ACL, which is wider. This is dangerous. Thus @default realm should be subset of all other realms.\n3. To absolutely guarantee this, we must implement/enforce this rule in LUCI Auth. We can\u0027t trust user-supplied realms.cfg to implement it correctly. Thus @default realm is included *implicitly* everywhere.\n\nRegarding expansions and custom roles: the vast majority of LUCI projects are not using lucicfg. Producing a flat denormalized form of realms by hand may lead to annoyance, copy-pasta and mistakes. realms.cfg is designed to still be writable/readable by humans, directly, since I believe this is something we\u0027ll have to be doing for a while.\n\nlucicfg will likely not use custom roles and \u0027extends\u0027. It\u0027s not a reason to completely remove them, lucicfg configs are still minority. I consider the cost of implementing \u0027extends\u0027 and custom roles, as well as a mental overhead associated with them, minor and acceptable. It will be concentrated in a single place.\n\nAll these points were mentioned in the design doc btw.\n\n\u003e if we mandate the proto is (logically) fully normalized, then constructs like default/base could be purely in starlark (though fallback would still need to be explicitly defined).\n\nSee my points 2 and 3 above why I think relying on clients to provide fully flat realms.cfg is dangerous and we need at least to implement implicit inclusion of @default realm. Also putting a lot of logic into lucicfg is impractical because it is *very* hard to change it. We have no technical means to regenerate all realms.cfg across all LUCI projects in bounded time.\n\n\u003e  \u0027logically\u0027 would mean that there\u0027s an automatic denormalization applied to the proto which is pushed down with the authdb\n\nThere will be \"automatic denormalization\" applied to the proto pushed with AuthDB. Roles (custom and predefined), realm inheritance (including implicit inheritance from @default), implicit permissions (to be added in future CLs) are *completely* resolved in LUCI Auth service. AuthDB has only [realm \u003d\u003e [(identity, permission)]] in some slightly compressed form (this form is totally unrelated to any semantic meaning). The the design doc for the reason for this.\n\n(Btw I think you use \"normalized\" and \"denormalized\" wrong. In DB world, \"normalized\" is fully relational, i.e. crapton of interlinked tables, and \"denormalized\" is fully flat, i.e. one giant table with a lot of repetition).",
      "parentUuid": "ffdcaf57_714170e0",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c210bdc_ef2fab95",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-02-14T04:36:11Z",
      "side": 1,
      "message": "\u003e Why we need it at all and why we must include it everywhere, implicitly:\n\u003e 1. Resource may point to deleted realms. We need a way to specify what ACLs to use in this case, since otherwise such resources becomes totally inaccessible and thus \"unfixable\". It is the primary reason why @default realm is needed at all.\n\u003e 2. Now imagine we do NOT inherit from @default realm. There may be realm with very limiting ACL (smaller than @default). If such realm is deleted, suddenly all its resources now have @default ACL, which is wider. This is dangerous. Thus @default realm should be subset of all other realms.\n\u003e 3. To absolutely guarantee this, we must implement/enforce this rule in LUCI Auth. We can\u0027t trust user-supplied realms.cfg to implement it correctly. Thus @default realm is included *implicitly* everywhere.\n\u003e \n\nAh ha! This now makes sense for @default, though I don\u0027t think it follows that other inclusions need to happen at the proto level (as opposed to in lucicfg). I think it would be good to include this thought train here too, as a means of 1) explaining WHY default must be auto-inherited everywhere and also 2) helping folks better understand what sorts of ACLs they should put in default.\n\n\u003e (Btw I think you use \"normalized\" and \"denormalized\" wrong. In DB world, \"normalized\" is fully relational, i.e. crapton of interlinked tables, and \"denormalized\" is fully flat, i.e. one giant table with a lot of repetition).\n\nYep, I did. derp.",
      "parentUuid": "506fdafd_01b469a9",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb6e191f_423e67a8",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T17:31:41Z",
      "side": 1,
      "message": "FWIU (3) stems from (2) and (2) stems from (1), so I will focus on (1).\n\nI don\u0027t understand \"such resources becomes totally inaccessible and thus \"unfixable\". This can be fixed by rolling back the CL that deleted the realm? If this was a problem, we\u0027d see it in buildbucket long ago because that\u0027s exactly how buildbucket works: [delete the bucket \u003d\u003e all builds are inaccessible] because [no bucket \u003d\u003e no acls \u003d\u003e nobody has access except admins]. Besides, this change in semantics is sort of breaking/unexpected for buildbucket customers.\n\nI do understand the need for @default realm, but I think it is important to distinguish two cases:\n1) a resource does NOT have an explicitly specified realm \u003d\u003e use @default\n2) a resource does have an explicitly specified realm, but it does not exist \u003d\u003e nobody has permissions\n\nproposal:\n1) no implicit extensions at proto level\n2) resource does not specify realm \u003d\u003e use @default\n3) realm does not exist \u003d\u003e equivalent to empty. This applies to @default too.",
      "parentUuid": "9c210bdc_ef2fab95",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eaa6b17_4e64ee30",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-02-14T18:09:43Z",
      "side": 1,
      "message": "\u003e [no bucket \u003d\u003e no acls \u003d\u003e nobody has access except admins]\n\nI believe the purpose of @default is precisely to define who \"admins\" are. Maybe this would be clearer if it was literally \"@administrators\"?\n\n\n\u003e I do understand the need for @default realm, but I think it is important to distinguish two cases:\n\u003e 1) a resource does NOT have an explicitly specified realm \u003d\u003e use @default\n\u003e 2) a resource does have an explicitly specified realm, but it does not exist \u003d\u003e nobody has permissions\n\nI think \"nobody has permissions\" is a dangerous state; _someone_ should always have access. Unless you meant \"nobody except admins\", in which case @default/@administrators is still needed.",
      "parentUuid": "fb6e191f_423e67a8",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbc44f69_78801b2e",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-02-14T18:42:02Z",
      "side": 1,
      "message": "\u003e exactly how buildbucket works: [delete the bucket \u003d\u003e all builds are inaccessible]\n\nWas this a deliberate design choice or an accident of the implementation? Is it really OK to have the dead wight of inaccessible builds in the datastore? Maybe if we want builds to be gone if the bucket is deleted, we need to actually delete them (e.g. soft delete first, delete for real later) when the bucket is deleted.\n\n\u003e Besides, this change in semantics is sort of breaking/unexpected for buildbucket customers.\n\nBuildbucket can (and probably should) check the presense of the bucket before checking its realm (a realm is strictly speaking part of the bucket resource: no bucket - no realm). Then the existing logic will be preserved if it is so critical. \n\n\u003e [no bucket \u003d\u003e no acls \u003d\u003e nobody has access except admins]\n\nReliance on global \"administrators\" group was a big mistake. @default realm is an attempt to fix it by \"sharding\" administrator role across projects. It works very similar to the global \"administrators\" group. Admins can access anything \u003d\u003d @default is subset of all realms.\n\nWill the situation be clearer if I rename @default to @root and document that it is primarily for owner-level permissions and that it is ok to keep it empty if project owners are ok with unreachable resources?",
      "parentUuid": "2eaa6b17_4e64ee30",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c18b7dc_50bb610f",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "nit: Must",
      "range": {
        "startLine": 62,
        "startChar": 5,
        "endLine": 62,
        "endChar": 11
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e35fba63_c282db0d",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "same here, why can\u0027t this be at the starlark level?",
      "range": {
        "startLine": 125,
        "startChar": 18,
        "endLine": 125,
        "endChar": 25
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64fe9319_85b9ecc8",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-02-14T03:59:37Z",
      "side": 1,
      "message": "Same explanation as above. Because manually writing and maintaining \n\nrealm {\n  binding {\n    role: \"role/service1/viewer\"\n    principals: \"a\"\n    principals: \"b\"\n    principals: \"c\"\n    principals: \"d\"\n  }\n  binding {\n    role: \"role/service2/viewer\"\n    principals: \"a\"\n    principals: \"b\"\n    principals: \"c\"\n    principals: \"d\"\n  }\n}\n\nis less fun than\n\ncustom_role {\n  name: \"customRole/uberviewer\"\n  extends: \"role/service1/viewer\"\n  extends: \"role/service2/viewer\"\n}\n\nrealm {\n  binding {\n    role: \"customRole/uberviewer\"\n    principals: \"a\"\n    principals: \"b\"\n    principals: \"c\"\n    principals: \"d\"\n  }\n}",
      "parentUuid": "e35fba63_c282db0d",
      "range": {
        "startLine": 125,
        "startChar": 18,
        "endLine": 125,
        "endChar": 25
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f129169e_19c48b71",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T17:31:41Z",
      "side": 1,
      "message": "writing text protos isn\u0027t going to be fun to begin with. We do have a solution for verbosity/unFunness: starlark. Can we not solve the same problem at multiple levels?",
      "parentUuid": "64fe9319_85b9ecc8",
      "range": {
        "startLine": 125,
        "startChar": 18,
        "endLine": 125,
        "endChar": 25
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0be106b2_6bc4b6bc",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-02-14T18:42:02Z",
      "side": 1,
      "message": "I don\u0027t want to block deployment of realms on the full migration to lucicfg. This feature will literally cost maybe 500 lines of python code (including tests) and will save me personally a lot of headache when writing realms.cfg for existing project based on numerous existing manually written cr-buildbucket.cfg files. Once lucicfg is used everywhere, we can safely delete these 500 lines of code (since lucicfg won\u0027t use this feature).",
      "parentUuid": "f129169e_19c48b71",
      "range": {
        "startLine": 125,
        "startChar": 18,
        "endLine": 125,
        "endChar": 25
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dce32e6e_c7a3f94d",
        "filename": "appengine/components/components/auth/proto/realms.proto",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 19,
        "startChar": 12,
        "endLine": 19,
        "endChar": 13
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bff64f71_7c3044b4",
        "filename": "appengine/components/components/auth/proto/realms.proto",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "one of these paragraphs should have a guideline that a resource of project X cannot be in a realm of project not-X",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de7e19d5_9afaccdf",
        "filename": "appengine/components/components/auth/proto/realms.proto",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2020-02-14T03:59:37Z",
      "side": 1,
      "message": "What is a definition of \"resource of project X\"? What project does a Swarming task in pool:luci.flex.ci belong?\n\nMy definition is \"a resource belongs to project X iff its realm is X/...\".",
      "parentUuid": "bff64f71_7c3044b4",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}