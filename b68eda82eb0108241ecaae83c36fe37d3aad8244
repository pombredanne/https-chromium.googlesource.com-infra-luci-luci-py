{
  "comments": [
    {
      "key": {
        "uuid": "ed79df29_738cf447",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "i find it very non-obvious that \"default\" is a included in all realms of the project. \"defaults\" are usually not prepended to the explicitly specified stuff. I am worried that someone may define\n\n  realms {\n    name: \"@default\"\n    // by default, stuff is public\n  }\n\n  realms {\n    name: \"secret\"\n    // restricted ACLs\n  }\n\nand then get burned. This mistake is especially easy to do because \"extends\" is at the proto level: the generated config will reveal the mistake. Didn\u0027t we converge on simple flat verbose configs generated by concise starlark? why \"extends\" has to be at the proto level?",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffdcaf57_714170e0",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-02-14T03:20:52Z",
      "side": 1,
      "message": "\u003e i find it very non-obvious that \"default\" is a included in all realms of the project. \"defaults\" are usually not prepended to the explicitly specified stuff. I am worried that someone may define\n\u003e \n\u003e   realms {\n\u003e     name: \"@default\"\n\u003e     // by default, stuff is public\n\u003e   }\n\u003e \n\u003e   realms {\n\u003e     name: \"secret\"\n\u003e     // restricted ACLs\n\u003e   }\n\u003e \n\nThis is a good point; I agree with this. Perhaps \"@base\" would be clearer? Or \"@fallback\" to capture the checked-in-case-the-realm-no-longer-exists nature?\"\n\n\u003e and then get burned. This mistake is especially easy to do because \"extends\" is at the proto level: the generated config will reveal the mistake. Didn\u0027t we converge on simple flat verbose configs generated by concise starlark? why \"extends\" has to be at the proto level?\n\nHm... This is a good question, too; if we mandate the proto is (logically) fully normalized, then constructs like default/base could be purely in starlark (though fallback would still need to be explicitly defined).\n\nI say \"logically\" because it\u0027s possible that the fully normalized proto would be gigantic at a technically-challenging scale. \u0027logically\u0027 would mean that there\u0027s an automatic denormalization applied to the proto which is pushed down with the authdb (i.e. application-level compression; gzip wouldn\u0027t be sufficient because it would still require either streaming through the whole db at lookup-time or fully expanding it into memory, which may be a problem).\n\nAutomatically denormalizing would also provide better lookup characteristics than the human\u0027s logical constructs anyway.",
      "parentUuid": "ed79df29_738cf447",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 47,
        "endChar": 24
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c18b7dc_50bb610f",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "nit: Must",
      "range": {
        "startLine": 62,
        "startChar": 5,
        "endLine": 62,
        "endChar": 11
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e35fba63_c282db0d",
        "filename": "appengine/auth_service/proto/realms_config.proto",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "same here, why can\u0027t this be at the starlark level?",
      "range": {
        "startLine": 125,
        "startChar": 18,
        "endLine": 125,
        "endChar": 25
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dce32e6e_c7a3f94d",
        "filename": "appengine/components/components/auth/proto/realms.proto",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 19,
        "startChar": 12,
        "endLine": 19,
        "endChar": 13
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bff64f71_7c3044b4",
        "filename": "appengine/components/components/auth/proto/realms.proto",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1114299
      },
      "writtenOn": "2020-02-14T02:57:54Z",
      "side": 1,
      "message": "one of these paragraphs should have a guideline that a resource of project X cannot be in a realm of project not-X",
      "range": {
        "startLine": 102,
        "startChar": 2,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "b68eda82eb0108241ecaae83c36fe37d3aad8244",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}