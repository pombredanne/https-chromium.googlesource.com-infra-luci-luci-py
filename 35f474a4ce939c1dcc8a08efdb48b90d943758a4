{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f42d59ce_8ff19fe9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1547372
      },
      "writtenOn": "2022-09-16T16:05:25Z",
      "side": 1,
      "message": "LGTM!",
      "revId": "35f474a4ce939c1dcc8a08efdb48b90d943758a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2d58022_ed50172a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2022-09-16T17:41:35Z",
      "side": 1,
      "message": "This CL doesn\u0027t have tests yet and is in \"Work in progress\" stage, but thanks for reviewing :) I do not plan changing actual code, just finish writing tests. I\u0027ll ping this CL when it is done.",
      "parentUuid": "f42d59ce_8ff19fe9",
      "revId": "35f474a4ce939c1dcc8a08efdb48b90d943758a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a843d481_a0745a10",
        "filename": "appengine/swarming/server/task_queues.py",
        "patchSetId": 2
      },
      "lineNbr": 1315,
      "author": {
        "id": 1547372
      },
      "writtenOn": "2022-09-16T16:05:25Z",
      "side": 1,
      "message": "Just want to confirm that I have the correct understanding about the rules of matching. \n\nIs this correct?\n\nif a bot has a set of \"expanded\" dimensions (IE `k:a|b \u003d\u003e [[k:a], [k:b]]`) then a task can be run on a bot if one or more of its expanded task dimensions is in the set of the bots expanded dimensions.",
      "range": {
        "startLine": 1315,
        "startChar": 13,
        "endLine": 1315,
        "endChar": 42
      },
      "revId": "35f474a4ce939c1dcc8a08efdb48b90d943758a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1aca7851_c7187d90",
        "filename": "appengine/swarming/server/task_queues.py",
        "patchSetId": 2
      },
      "lineNbr": 1315,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2022-09-16T17:41:35Z",
      "side": 1,
      "message": "First, let\u0027s ignore \"|\" for now. Bots report dimensions as `{key: [value]}`, e.g. `{\"pool\": [\"some-pool\"], \"os\": [\"Linux\", \"Ubuntu\"]}`. It means the pool can tasks that target \"Linux\" or \"Ubuntu\" (or both or neither, see below).\n\nTasks also have dimensions specified as `{key: [value]}`. A matching bot should have *all* dimensions requested by the task (but may be have more). For example, following tasks will match to the bot:\n\n```\n{\"pool\": [\"some-pool\"], \"os\": [\"Linux\"]}\n{\"pool\": [\"some-pool\"], \"os\": [\"Ubuntu\"]}\n{\"pool\": [\"some-pool\"], \"os\": [\"Linux\", \"Ubuntu]}\n{\"pool\": [\"some-pool\"]}\n{}\n```\n\nFollowing tasks will not match to the bot:\n\n```\n{\"pool\": [\"another-pool\"], \"os\": [\"Linux\"]}\n{\"pool\": [\"some-pool\"], \"os\": [\"Windows\"]}\n{\"pool\": [\"some-pool\"], \"os\": [\"Linux\", \"Debian]}\n```\n\nRepeated dimension values here act as AND: the task the bot to have os:Linux AND os:Ubuntu.\n\nNow about \"|\". This denotes that a task wants one set of dimensions OR another. For example `{\"pool\": [\"some-pool\"], \"os\": [\"Linux|Windows\"]}`. Such task will match to bots that report os:Linux or os:Windows.\n\nMore complex example might be:\n\n```\n{\"pool\": [\"some-pool\"], \"os\": [\"Linux\", \"Debian|Ubuntu\"]}\n```\n\nThis logically filters bots based on their `os` dimension (which is a list!) as \n\n```\n(\"Linux\" in os) AND (\"Debian\" in os OR \"Ubuntu\" in os)\n```\n\nIn terms of implementation such filters are rewriting into \"(AND AND AND) OR (AND AND AND) OR ...\". This is what `expand_dimensions_to_flats` does essentially. So the above filter is rewritten as\n\n```\n(\"Linux\" in os AND \"Debian\" in os) OR (\"Linux\" in os AND \"Ubuntu\" in os)\n```\n\nInternally this is represented in `sets` as:\n\n```\nsets \u003d [\n  [\"os:Linux\", \"os:Debian\"],\n  [\"os:Linux\", \"os:Ubuntu\"],\n]\n```\n\n(I omitted \"pool\" and other task dimensions for clarity).\n\nBot dimensions are internally represented by a set of \"k:v\" pairs as well: `[\"os:Linux\", \"os:Ubuntu\", \"os:Ubuntu-20.20\"]`.\n\n`any(bot_dims_set.issuperset(dims) for dims in task_dims_sets)` checks if bot can run (\u003d\u003d has all required dimensions, perhaps more \u003d\u003e issuperset) any of ORed requirement of the task.\n\nNote that bots can\u0027t report dimensions with \"|\" in them. Then already report all dimensions as \"OR\" semantically, e.g. a bot with `{\"os\": [\"Linux\", \"Ubuntu\"]}` can run tasks with `os:Linux` OR `os:Ubuntu`.",
      "parentUuid": "a843d481_a0745a10",
      "range": {
        "startLine": 1315,
        "startChar": 13,
        "endLine": 1315,
        "endChar": 42
      },
      "revId": "35f474a4ce939c1dcc8a08efdb48b90d943758a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "324af2ed_9e637469",
        "filename": "appengine/swarming/server/task_queues.py",
        "patchSetId": 2
      },
      "lineNbr": 1667,
      "author": {
        "id": 1547372
      },
      "writtenOn": "2022-09-16T16:05:25Z",
      "side": 1,
      "message": "I\u0027m assuming this check is here because in general, we want to avoid creating the transaction if possible?",
      "range": {
        "startLine": 1661,
        "startChar": 2,
        "endLine": 1667,
        "endChar": 26
      },
      "revId": "35f474a4ce939c1dcc8a08efdb48b90d943758a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08b1b1db_23e3030b",
        "filename": "appengine/swarming/server/task_queues.py",
        "patchSetId": 2
      },
      "lineNbr": 1667,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2022-09-16T17:41:35Z",
      "side": 1,
      "message": "Yes. This is very common pattern with transactions:\n1. Get an entity from a query or non-transactional `get`. This is usually cheap (there are caches, queries return stuff in batches etc).\n2. Check conditions. If they don\u0027t match, we are done, and it was cheap.\n3. Launch the transaction.\n4. Get the entity *again* inside the transaction now. It might have changed already.\n5. Recheck conditions.\n6. Commit the change. If something modified the entity while we were inside the transaction, the commit would fail and the ndb library would retry the transaction (from step 3).",
      "parentUuid": "324af2ed_9e637469",
      "range": {
        "startLine": 1661,
        "startChar": 2,
        "endLine": 1667,
        "endChar": 26
      },
      "revId": "35f474a4ce939c1dcc8a08efdb48b90d943758a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}