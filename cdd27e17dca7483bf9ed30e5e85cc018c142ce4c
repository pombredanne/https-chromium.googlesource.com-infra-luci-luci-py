{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "137eb32a_58309502",
        "filename": "appengine/swarming/swarming_bot/api/platforms/win.py",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2023-07-31T20:41:25Z",
      "side": 1,
      "message": "This is a hack since `X:\\b\\` directory is a detail of how Chrome bots are deployed. It is not part of Swarming bot code. A swarming bot can run from other directories. \n\nHow about getting the current working directory (e.g. `C:\\b\\w\\blah`) and converting it into a list of paths like `[\u0027C:\\\u0027, \u0027C:\\b\\\u0027, \u0027C:\\b\\w\\\u0027, \u0027C:\\b\\w\\blah\u0027]` and checking all of them? (in addition to all of letters of the alphabet).",
      "range": {
        "startLine": 56,
        "startChar": 46,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "cdd27e17dca7483bf9ed30e5e85cc018c142ce4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34aebb2e_d0ec9f7b",
        "filename": "appengine/swarming/swarming_bot/api/platforms/win.py",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1546477
      },
      "writtenOn": "2023-07-31T21:39:09Z",
      "side": 1,
      "message": "Not sure I follow, the only directories we map additional drives to are ```c:\\b```. This is a new change as of last week.\n\nhttps://source.corp.google.com/h/chrome-internal/infra/infra_internal/+/main:ccompute/images/win10/bootstrap/tools/installers/provision.py;l\u003d943\n\nAre you wanting to make this more dynamic in the event we move attaching the swarming drive to something other than ```c:\\b```?",
      "parentUuid": "137eb32a_58309502",
      "range": {
        "startLine": 56,
        "startChar": 46,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "cdd27e17dca7483bf9ed30e5e85cc018c142ce4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd2d85b7_88f82433",
        "filename": "appengine/swarming/swarming_bot/api/platforms/win.py",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1002539
      },
      "writtenOn": "2023-07-31T21:42:38Z",
      "side": 1,
      "message": "I\u0027m asking you not to hardcode \"..:\\b\" in Swarming source code.",
      "parentUuid": "34aebb2e_d0ec9f7b",
      "range": {
        "startLine": 56,
        "startChar": 46,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "cdd27e17dca7483bf9ed30e5e85cc018c142ce4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e728596e_33ce8295",
        "filename": "appengine/swarming/swarming_bot/api/platforms/win.py",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 1546477
      },
      "writtenOn": "2023-08-01T21:58:00Z",
      "side": 1,
      "message": "It appears GetDriveTypeW doesn\u0027t work as I expect either as any directory under the C drive will return 3 (DRIVE_FIXED).\n\nLooking through fileapi.h it looks like GetVolumePathNameW may do what I want.\nhttps://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getvolumepathnamew\nI\u0027ve played around with trying to build this out but haven\u0027t had much luck. The value in vol always returns None. No doubt I\u0027m doing something wrong below.\n\n```\nvol \u003d ctypes.c_wchar_p()\npath \u003d \u0027C:\\\\b\\\\w\\\\\u0027\nctypes.windll.kernel32.GetVolumePathNameW(\n  ctypes.c_wchar_p(path), ctypes.pointer(vol), ctypes.c_ulong()\n)\nprint(vol.value)\n```\n\nReading the docs on GetVolumePathNameW if ```C:\\\\b\\\\w\\\\``` is the input then ```C:\\\\b\\\\``` should be the output, assuming the SSD is mapped to c:\\b",
      "parentUuid": "bd2d85b7_88f82433",
      "range": {
        "startLine": 56,
        "startChar": 46,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "cdd27e17dca7483bf9ed30e5e85cc018c142ce4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:approval_code-owners"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "cdd27e17dca7483bf9ed30e5e85cc018c142ce4c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "cdd27e17dca7483bf9ed30e5e85cc018c142ce4c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cdd27e17dca7483bf9ed30e5e85cc018c142ce4c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cdd27e17dca7483bf9ed30e5e85cc018c142ce4c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}